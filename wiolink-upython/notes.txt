Create conda env:
conda create -n wiolink python=3.4

pip install esptool

WIOLINK serial driver:
 UART driver from - and install 64bit version.
 https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers

 After connecting the board to the PC USB port, now getting COM5 in device manager !

 - Download latest esp binary from micropython site - 
 http://micropython.org/download#esp8266

 - erase
 esptool.py --port COM5 erase_flash
esptool.py v2.8
Serial port COM5
Connecting....
Detecting chip type... ESP8266
Chip is ESP8266EX
Features: WiFi
Crystal is 26MHz
MAC: 3c:71:bf:2c:4d:02
Uploading stub...
Running stub...
Stub running...
Erasing flash (this may take a while)...
Chip erase completed successfully in 6.0s
Hard resetting via RTS pin...

- burn new flash
esptool --port COM5 --baud 115200 write_flash --flash_size=detect --flash_mode=dio --flash_freq=40m 0 esp8266-20191220-v1.12.bin

(wiolink) wiolink>esptool --port COM5 --baud 115200 write_flash --flash_size=detect --flash_mode=dio --flash_freq=40m 0 esp8266-20191220-v1.12.bin
esptool.py v2.8
Serial port COM5
Connecting....
Detecting chip type... ESP8266
Chip is ESP8266EX
Features: WiFi
Crystal is 26MHz
MAC: 3c:71:bf:2c:4d:02
Uploading stub...
Running stub...
Stub running...
Configuring flash size...
Auto-detected Flash size: 4MB
Flash params set to 0x0240
Compressed 619828 bytes to 404070...
Wrote 619828 bytes (404070 compressed) at 0x00000000 in 35.8 seconds (effective 138.5 kbit/s)...
Hash of data verified.
Leaving...
Hard resetting via RTS pin...

====
No need to remove the cable after programming.
Getting the python prompt - 
- Download Putty
- Configure to the serial prompt (COM5 in current case), and 115200 baud rate
Connect. The below output can be seen.

MicroPython v1.12 on 2019-12-20; ESP module with ESP8266
Type "help()" for more information.
>>>
>>> print ('hello wio')
hello wio
>>> import machine
>>> machine.freq()
80000000
>>> import network
>>> ap_if = network.WLAN(network.AP_IF)
>>> ap_if.active()
True
>>> ap_if.ifconfig()
('192.168.4.1', '255.255.255.0', '192.168.4.1', '208.67.222.222')
>>>



1.6. WiFi
After a fresh install and boot the device configures itself as a WiFi access point (AP) that you can connect to. The ESSID is of the form MicroPython-xxxxxx where the x’s are replaced with part of the MAC address of your device (so will be the same everytime, and most likely different for all ESP8266 chips). The password for the WiFi is micropythoN (note the upper-case N). Its IP address will be 192.168.4.1 once you connect to its network. WiFi configuration will be discussed in more detail later in the tutorial.

from:
https://randomnerdtutorials.com/micropython-esp32-esp8266-access-point-ap/

import network
ap = network.WLAN(network.AP_IF)
ap.active(True)
#ap.config(essid=ssid, password=password)

while ap.active() == False:
  pass

print('Connection successful')
print(ap.ifconfig())

def web_page():
  html = """<html><head><meta name="viewport" content="width=device-width, initial-scale=1"></head>
  <body><h1>Hello, World!</h1></body></html>"""
  return html

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('', 80))
s.listen(5)

while True:
  conn, addr = s.accept()
  print('Got a connection from %s' % str(addr))
  request = conn.recv(1024)
  print('Content = %s' % str(request))
  response = web_page()
  conn.send(response)
  conn.close()

=====
Connecting to board in AP mode:

When the board is set in AP mode (as above), connect to the WiFi network named as "micropython-2c4d02"
Then, connect USB cable, to the PC.
Check "Serial port" appearing in the Device Manager, for ex COM5
Open Putty.
Set serial port communication speed to COM5 - 115200 speed
At the Putty screen, press "enter" key, to get the python prompt 
">> print ('Hello') ".

====
Installing ampy
Activate the conda environment already created.
pip install adafruit-ampy
>>> ampy --help

(wiolink) ampy -p COM5 -b 115200 put main.py
(wiolink) ampy -p COM5 -b 115200 run main.py
====  
POST req from station

How to get a key press from default wiolink without any Grove/other accessory:
https://techtutorialsx.com/2017/06/18/esp32-esp8266-micropython-http-post-requests/#more-17689
Hackster post - linux OS
https://www.hackster.io/naveenbskumar/using-micropython-on-seeed-wio-link-d015cd

Grove button for keys:
http://wiki.seeedstudio.com/Grove-Button/

PINS on Wiolink:
Digital I/O Pins (DIO): 10
Analog Input Pins (ADC): 1

Pin(1) and Pin(3) are REPL UART TX and RX respectively. Also note that Pin(16) is a special pin (used for wakeup from deepsleep mode) 
Schematic of Wiolink - http://wiki.seeedstudio.com/Wio_Link/ - Schematic PDF
--> Config button is connected to GPIO0 - so can use below, and it works.
import machine
machine.Pin(0).value()
This pin is pulled up high, so returns 0 if key is pressed. It works.

====
ampy debugging:
incase main.py does not exit and gets stuck, there is no way from ampy to stop it.
Close the terminal.
Open Putty, and connect to board.
in the Putty prompt, press ctrl+c.
Then remove the bad file, via
import os
os.remove('main.py')

https://docs.micropython.org/en/latest/esp8266/quickref.html

====
Triggering from py on PC:
from pyautogui import press
press('space') --> Sends space kb event to windows

====
Red and Yellow wires - on Grove connector - connected across push-switch.
Readings do not change from GPIO14 when button pressed. 
Strange happenings on GPIO12 (red LED starts on)

So about to try REES52 ESP8266 NodeMcu WiFi Development Board
https://randomnerdtutorials.com/esp8266-pinout-reference-gpios/

REES52 NodeMCU:

(wiolink) C:>esptool --port COM5 --baud 115200 write_flash --flash_size=detect --flash_mode=dio --flash_freq=40m 0 esp8266-20191220-v1.12.bin
esptool.py v2.8
Serial port COM5
Connecting....
Detecting chip type... ESP8266
Chip is ESP8266EX
Features: WiFi
Crystal is 26MHz
MAC: 24:62:ab:0a:f8:83
Uploading stub...
Running stub...
Stub running...
Configuring flash size...
Auto-detected Flash size: 4MB
Flash params set to 0x0240
Compressed 619828 bytes to 404070...
Wrote 619828 bytes (404070 compressed) at 0x00000000 in 35.8 seconds (effective 138.3 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
====
Had to perform below, to get working prompt
ampy -p COM5 -b 115200 put main.py 
====
Open PUTTY on COM5/112500 and perform below

import machine
pin = machine.Pin(2, machine.Pin.OUT)
pin.on()
pin.off()

Can see the blue LED off and on, ie, pin.on() makes LED off and pin.off makes LED on...

https://www.instructables.com/id/Control-LED-Using-PushButton-With-NodeMCU/
Push Button connections :
The first pin goes from one leg of the pushbutton through a pull-up resistor(here 10K Ohms) to the 5v supply.
The second pin goes from the corresponding leg of the pushbutton to Ground (GND) pin.
The third pin connects to a Digital I/O pin (here pin D0) which reads the button's state.

ESP8266 - Has pins 1-16
REES52 MAPPING  --> ESP
D5, D6, D7, D8 --> GPIO14,12,13,15
D1, D2 --> GPIO5, 4
SD3, SD2 --> GPIO10, 9
Also refer - https://circuit-diagramz.com/wp-content/uploads/2018/11/ESP8266-12e-Pinout-7.jpg

This works on REES board
import machine
p4 = machine.Pin(4, machine.Pin.IN)
p4.value()
0
p4.value()   /// Now press switch connected to D2 aka GPIO4
1
p4.value() /// Release the switch back
0
