Create conda env:
conda create -n wiolink python=3.4

pip install esptool

WIOLINK serial driver:
 UART driver from - and install 64bit version.
 https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers

 After connecting the board to the PC USB port, now getting COM5 in device manager !

 - Download latest esp binary from micropython site - 
 http://micropython.org/download#esp8266

 - erase
 esptool.py --port COM5 erase_flash
esptool.py v2.8
Serial port COM5
Connecting....
Detecting chip type... ESP8266
Chip is ESP8266EX
Features: WiFi
Crystal is 26MHz
MAC: 3c:71:bf:2c:4d:02
Uploading stub...
Running stub...
Stub running...
Erasing flash (this may take a while)...
Chip erase completed successfully in 6.0s
Hard resetting via RTS pin...

- burn new flash
esptool --port COM5 --baud 115200 write_flash --flash_size=detect --flash_mode=dio --flash_freq=40m 0 esp8266-20191220-v1.12.bin

(wiolink) wiolink>esptool --port COM5 --baud 115200 write_flash --flash_size=detect --flash_mode=dio --flash_freq=40m 0 esp8266-20191220-v1.12.bin
esptool.py v2.8
Serial port COM5
Connecting....
Detecting chip type... ESP8266
Chip is ESP8266EX
Features: WiFi
Crystal is 26MHz
MAC: 3c:71:bf:2c:4d:02
Uploading stub...
Running stub...
Stub running...
Configuring flash size...
Auto-detected Flash size: 4MB
Flash params set to 0x0240
Compressed 619828 bytes to 404070...
Wrote 619828 bytes (404070 compressed) at 0x00000000 in 35.8 seconds (effective 138.5 kbit/s)...
Hash of data verified.
Leaving...
Hard resetting via RTS pin...

====
No need to remove the cable after programming.
Getting the python prompt - 
- Download Putty
- Configure to the serial prompt (COM5 in current case), and 115200 baud rate
Connect. The below output can be seen.

MicroPython v1.12 on 2019-12-20; ESP module with ESP8266
Type "help()" for more information.
>>>
>>> print ('hello wio')
hello wio
>>> import machine
>>> machine.freq()
80000000
>>> import network
>>> ap_if = network.WLAN(network.AP_IF)
>>> ap_if.active()
True
>>> ap_if.ifconfig()
('192.168.4.1', '255.255.255.0', '192.168.4.1', '208.67.222.222')
>>>



1.6. WiFi
After a fresh install and boot the device configures itself as a WiFi access point (AP) that you can connect to. The ESSID is of the form MicroPython-xxxxxx where the xâ€™s are replaced with part of the MAC address of your device (so will be the same everytime, and most likely different for all ESP8266 chips). The password for the WiFi is micropythoN (note the upper-case N). Its IP address will be 192.168.4.1 once you connect to its network. WiFi configuration will be discussed in more detail later in the tutorial.

